name: Publish LJV Toolkit

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to release (optional, leave empty to auto patch increment)'
        required: false

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 检出仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3️⃣ 安装 semver 工具
      - name: Install semver
        run: npm install -g semver

      # 4️⃣ 确定版本号（手动输入或自动 patch 递增）
      - name: Determine version
        id: version
        run: |
          INPUT_VER="${{ github.event.inputs.release_version }}"
          if [ -n "$INPUT_VER" ]; then
            NEW_VER="$INPUT_VER"
          else
            CURRENT_VER=$(node -p "require('./package.json').version")
            NEW_VER=$(npx semver $CURRENT_VER -i patch)
          fi
          echo "Determined version: $NEW_VER"
          echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT

      # 5️⃣ 同步 package.json 版本号
      - name: Update package.json version
        run: |
          NEW_VER=${{ steps.version.outputs.new_version }}
          echo "🔄 Setting package.json version to $NEW_VER"
          node -e "let fs=require('fs');let p=require('./package.json');p.version='${NEW_VER}';fs.writeFileSync('./package.json', JSON.stringify(p,null,2));"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json
          git commit -m "chore: set version to ${NEW_VER}" || echo "No changes to commit"
          git push origin HEAD:main

      # 6️⃣ 自动生成 CHANGELOG.md 内容
      - name: Generate changelog
        id: changelog
        run: |
          NEW_VER=${{ steps.version.outputs.new_version }}
          LAST_TAG=$(git describe --tags --abbrev=0 @^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log $LAST_TAG..HEAD --pretty=format:"- %s" > CHANGELOG_TEMP.md
          else
            echo "- Initial release" > CHANGELOG_TEMP.md
          fi
          echo "changelog_path=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT

      # 7️⃣ 创建 Git tag 并 push
      - name: Create Git tag
        run: |
          NEW_VER=${{ steps.version.outputs.new_version }}
          git tag -f v${NEW_VER}
          git push origin v${NEW_VER} --force

      # 8️⃣ 创建 GitHub Release（带 changelog）
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "LJV Toolkit v${{ steps.version.outputs.new_version }}"
          body_path: ${{ steps.changelog.outputs.changelog_path }}
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9️⃣ 验证版本号
      - name: Verify version
        run: |
          PKG_VER=$(node -p "require('./package.json').version")
          TAG_VER=${{ steps.version.outputs.new_version }}
          if [ "$PKG_VER" != "$TAG_VER" ]; then
            echo "❌ Version mismatch!"
            exit 1
          fi
          echo "✅ Version successfully synced with tag!"

      # 🔟 完成提示
      - name: Done
        run: echo "🎉 Publish pipeline completed successfully! OpenUPM will automatically build the new version once the tag is pushed."
